package co.edu.ucc.MARIA.patron_abstract_factory;

import java.util.Base64;

// ğŸ”¹ Producto abstracto: Cuenta
interface Cuenta {
    void abrir();
}

// ğŸ”¹ Producto concreto: Cuenta Corriente
class CuentaCorriente implements Cuenta {
    @Override
    public void abrir() {
        System.out.println("âœ… Abriendo cuenta corriente.");
    }
}

// ğŸ”¹ Producto concreto: Cuenta Ahorros
class CuentaAhorros implements Cuenta {
    @Override
    public void abrir() {
        System.out.println("âœ… Abriendo cuenta de ahorros.");
    }
}

// ğŸ”¹ Producto abstracto: Tarjeta
interface Tarjeta {
    void emitir();
}

// ğŸ”¹ Producto concreto: Tarjeta DÃ©bito
class TarjetaDebito implements Tarjeta {
    @Override
    public void emitir() {
        System.out.println("ğŸ’³ Emitiendo tarjeta de dÃ©bito.");
    }
}

// ğŸ”¹ Producto concreto: Tarjeta CrÃ©dito
class TarjetaCredito implements Tarjeta {
    @Override
    public void emitir() {
        System.out.println("ğŸ’³ Emitiendo tarjeta de crÃ©dito.");
    }
}

// ğŸ”¹ FÃ¡brica abstracta: Define mÃ©todos para crear productos abstractos
interface FabricaFinanciera {
    Cuenta crearCuenta();
    Tarjeta crearTarjeta();
}

// ğŸ”¹ FÃ¡brica concreta: Banco A (ofrece Cuenta Corriente y Tarjeta CrÃ©dito)
class BancoAFactory implements FabricaFinanciera {
    @Override
    public Cuenta crearCuenta() {
        return new CuentaCorriente();
    }

    @Override
    public Tarjeta crearTarjeta() {
        return new TarjetaCredito();
    }
}

// ğŸ”¹ FÃ¡brica concreta: Banco B (ofrece Cuenta Ahorros y Tarjeta DÃ©bito)
class BancoBFactory implements FabricaFinanciera {
    @Override
    public Cuenta crearCuenta() {
        return new CuentaAhorros();
    }

    @Override
    public Tarjeta crearTarjeta() {
        return new TarjetaDebito();
    }
}
